/* 
 * File:   Tennis.h
 * Author: Fano
 *
 * Created on 3 de marzo de 2017, 0:52
 */

#ifndef TENNIS_H
#define	TENNIS_H

#include "GPUCore/GPUCore.h"
#include "IOCore/IOCore.h"

void Tennis(){
    IO_init();
    GPU_init();
    
    uint8_t tilesMap[30][40] = 
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
    {0, 0, 0, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

    uint8_t tiles[12][8][8] = {{{0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11}}
        ,{{0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
        ,{{0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22}}
        ,{{0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22}}
        ,{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22}}
        ,{{0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
        ,{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22}}
        ,{{0x11, 0x11, 0x11, 0x22, 0x22, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x22, 0x22, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x22, 0x22, 0x11, 0x11, 0x11},
        {0x11, 0x11, 0x11, 0x22, 0x22, 0x11, 0x11, 0x11}}
        ,{{0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
        ,{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22}}
        ,{{0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00},
        {0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00},
        {0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00},
        {0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00}}
        ,{{0x00, 0x04, 0x40, 0x22, 0x22, 0x44, 0x04, 0x00},
        {0x44, 0x42, 0x00, 0x22, 0x22, 0x44, 0x44, 0x44},
        {0x44, 0x44, 0x24, 0x22, 0x22, 0x44, 0x44, 0x44},
        {0x00, 0x40, 0x44, 0x22, 0x22, 0x44, 0x40, 0x00}}
    };

    uint8_t palettes[1][16][3] = {{{0xFF, 0xFF, 0xFF}, {0x00, 0x00, 0x00}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF}}};

    int k;
    for(k = 0; k < 12; k++){
        Tile tile = GPU_newTile(tiles[k]);
        GPU_loadTile(&tile, k, 1);
    }
    for(k = 0; k < 1; k++){
        Palette palette = GPU_newPalette(palettes[k]);
        GPU_loadPalette(&palette, k, 1);
    }
    
    GPU_loadMap(&tilesMap[0][0], 30, 40);
    
    uint8_t back = GPU_addStatic(0, 1, 0, 0, 1);
    uint8_t corner1 = GPU_addStatic(1, 1, 0, 0, 0);
    uint8_t corner2 = GPU_addStatic(2, 1, 0, 0, 0);
    uint8_t corner3 = GPU_addStatic(3, 1, 0, 0, 0);
    uint8_t corner4 = GPU_addStatic(4, 1, 0, 0, 0);
    uint8_t line1 = GPU_addStatic(5, 1, 0, 0, 0);
    uint8_t line2 = GPU_addStatic(6, 1, 0, 0, 0);
    uint8_t line3 = GPU_addStatic(7, 1, 0, 0, 1);
    uint8_t line4 = GPU_addStatic(8, 1, 0, 0, 0);
    uint8_t line5 = GPU_addStatic(9, 1, 0, 0, 0);
    
    uint8_t player1_1 = GPU_addSprite(10, 1, 4, 13);
    uint8_t player1_2 = GPU_addSprite(10, 1, 4, 14);
    uint8_t player1_3 = GPU_addSprite(10, 1, 4, 15);
    uint8_t player1_4 = GPU_addSprite(10, 1, 4, 16);
    uint8_t player1_5 = GPU_addSprite(10, 1, 4, 17);
    uint8_t yPlayer1 = 15;
    
    uint8_t player2_1 = GPU_addSprite(10, 1, 35, 13);
    uint8_t player2_2 = GPU_addSprite(10, 1, 35, 14);
    uint8_t player2_3 = GPU_addSprite(10, 1, 35, 15);
    uint8_t player2_4 = GPU_addSprite(10, 1, 35, 16);
    uint8_t player2_5 = GPU_addSprite(10, 1, 35, 17);
    uint8_t yPlayer2 = 15;
    
    uint8_t ball = GPU_addSprite(11, 1, 20, 15);
    uint8_t xBall = 20;
    uint8_t yBall = 15;
    int dirXBall = -1;
    int dirYBall = -1;  
    CLICK_ON;
    while(1){
        GPU_draw();
        xBall+= dirXBall;
        yBall+= dirYBall;

        while(!GPU_spriteMove(ball, xBall, yBall)){
            if(yBall == 3){
                yBall = 4;
                dirYBall = 1;
            }
            if(yBall == 26){
                yBall = 25;
                dirYBall = -1;
            }
            if(xBall == 3){
                xBall = 4;
                dirXBall = 0;
            }
            if(xBall == 36){
                xBall = 35;
                dirXBall = 0;
            }
        }
        
        if(dirXBall == -1){
            yPlayer1 += yBall > yPlayer1;
            yPlayer1 -= yBall < yPlayer1;
            while(!GPU_spriteMove(player1_1, 4, yPlayer1 - 2))
                yPlayer1++;
            while(!GPU_spriteMove(player1_5, 4, yPlayer1 + 2)){
                yPlayer1--;
                GPU_spriteMove(player1_1, 4, yPlayer1 - 2);
            }
            GPU_spriteMove(player1_2, 4, yPlayer1 - 1);
            GPU_spriteMove(player1_3, 4, yPlayer1);
            GPU_spriteMove(player1_4, 4, yPlayer1 + 1);
        }
        
        if(dirXBall == 1){
            yPlayer2 += yBall > yPlayer2;
            yPlayer2 -= yBall < yPlayer2;
            while(!GPU_spriteMove(player2_1, 35, yPlayer2 - 2))
                yPlayer2++;
            while(!GPU_spriteMove(player2_5, 35, yPlayer2 + 2)){
                yPlayer2--;
                GPU_spriteMove(player2_1, 35, yPlayer2 - 2);
            }
            GPU_spriteMove(player2_2, 35, yPlayer2 - 1);
            GPU_spriteMove(player2_3, 35, yPlayer2);
            GPU_spriteMove(player2_4, 35, yPlayer2 + 1);
        }
        
        if(xBall==5){
            if(yBall <= yPlayer1 + 2 && yBall >= yPlayer1 - 2)
                dirXBall = 1;
        }
        
        if(xBall==34){
            if(yBall <= yPlayer2 + 2 && yBall >= yPlayer2 - 2)
                dirXBall = -1;
        }
        
        CLICK_next();
    }
}

#endif	/* TENNIS_H */

